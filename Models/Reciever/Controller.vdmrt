class Controller

types

Message :: x: real
					 y: real
					 z: real

instance variables

-- thread period
private period: nat := 1E9;

-- access shared variable "iin"
iin: StringPort;

operations

public Controller: nat1 * StringPort ==> Controller
Controller(p,s) == (
  period := frequency_to_period(p);
	iin := s
);

private Step: () ==>()
Step() == cycles(2) 
(
	-- read input
	dcl input: seq of char := iin.getValue();
	
	-- try to convert from string to list of strings
	let mk_(list,l) = VDMUtilDebug`seq_of_char2val[seq of (real*real*real)](input)
	in if list then (
	  for all i in set inds l do (
			let x = l(i) in 
		    -- N.B. using a tuple until the library can handle custom types 
			  -- debug 
			  IO`printf("RECEIVER.FMU: Got %s at %s\n", [mk_Message(x.#1, x.#2, x.#3), time/1e9])
	  )
	) else (
		let mk_(single,s) = VDMUtilDebug`seq_of_char2val[real*real*real](input)
		in if single then (
		  -- N.B. using a tuple until the library can handle custom types 
		  -- debug 
			IO`printf("RECEIVER.FMU: Got %s at %s\n", [mk_Message(s.#1, s.#2, s.#3), time/1e9])
		)
	)
);

-- run as a periodic thread
thread periodic(period, 0 ,0, 0)(Step);

functions 

-- convert frequency to period in nanoseconds
private frequency_to_period: real -> nat
frequency_to_period(f) == floor 1E9/f  

end Controller