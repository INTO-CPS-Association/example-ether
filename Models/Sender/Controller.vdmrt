class Controller

types

Message :: x: real
					 y: real
					 z: real

instance variables

-- thread period
private period: nat := 1E9;

-- access shared variable "out"
out: MessagePort;

operations

-- constructor for controller
public Controller: nat1 * StringPort ==> Controller
Controller(p,s) == (
  period := frequency_to_period(p);
	out := new MessagePort(s);
);

operations

-- send counter out and increase counter
private Step: () ==>()
Step() == cycles(2) 
(
	-- generate a random message
	dcl m: MessagePort`Message := mk_MessagePort`Message(MATH`rand(10), MATH`rand(10), MATH`rand(10));

	-- convert to string representation and send
	out.setValue(m); 

  -- debug
  IO`printf("SENDER.FMU: Sent %s at %s\n", [m, time/1e9]);
);

-- run as a periodic thread
thread periodic(period, 0 ,0, 0)(Step);

functions 

-- convert frequency to period in nanoseconds
private frequency_to_period: real -> nat
frequency_to_period(f) == floor 1E9/f    

end Controller